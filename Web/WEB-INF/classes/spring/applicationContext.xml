<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

	<!-- 读取配置文件 -->
	<bean id="propertyConfigurer"
		class="com.taozhu.common.util.SysPropertyUtil">
		<property name="locations">
			<list>
				<value>classpath:datasource.properties</value>
				<value>classpath:app.properties</value>
			</list>
		</property>
	</bean>	
	<!-- 组件扫描 -->
	<context:component-scan base-package="com.taozhu" />
	<context:component-scan base-package="test" />
	<!-- 激活@Autowired -->
	<context:annotation-config />
	<!-- 配置C3P0数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClass}" />
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}" />
		<property name="user" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
		<property name="minPoolSize" value="${c3p0.miniPoolSize}" />
		<property name="maxPoolSize" value="${c3p0.maxPoolSize}" />
		<property name="initialPoolSize" value="${c3p0.initialPoolSize}" />
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="${c3p0.maxIdleTime}" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="${c3p0.acquireIncrement}" />
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="${c3p0.acquireRetryAttempts}" />
		<!--两次连接中间隔时间，单位毫秒。Default: 1000 -->
		<property name="acquireRetryDelay" value="${c3p0.acquireRetryDelay}" />
		<!--如果设为true那么在取得连接的同时将校验连接的有效性。Default: false -->
		<property name="testConnectionOnCheckin" value="${c3p0.testConnectionOnCheckin}" />
		<property name="breakAfterAcquireFailure" value="${c3p0.breakAfterAcquireFailure}" />
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="${c3p0.idleConnectionTestPeriod}" />
		<!--
			当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出
			SQLException,如设为0则无限期等待。单位毫秒。Default: 0
		-->
		<property name="checkoutTimeout" value="${c3p0.checkoutTimeout}" />
	</bean>
	<!-- 定义MyBatis的SqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<!-- 启动时自动加载所有的mapper.xml-->
		<property  name="mapperLocations"  value="classpath:com/taozhu/persistence/*Mapper.xml"/> 
	</bean>
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">  
        <constructor-arg index="0" ref="sqlSessionFactory" />  
        <constructor-arg index="1" value="BATCH" /><!-- 进行批量操作属性 -->
    </bean>
	<!-- 映射扫描配置 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.taozhu.persistence" />
	</bean>
	<!--
		用于持有ApplicationContext,可以使用SpringContextUtil.getBean('xxxx')的静态方法得到spring
		bean对象
	-->
	<bean id="SpringContextUtil" class="com.taozhu.common.util.SpringContextUtil" />
	
	<bean id="baseDAO" class="com.taozhu.common.base.dao.BaseDAO">
		<property name="sqlSessionTemplate" ref="sqlSessionTemplate" />  
	</bean>

	<!-- 由spring管理mybatis的事物 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 定义拦截器，用来指定事物属性，级别，和异常处理 -->
	<bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="transactionManager"></property>
		<property name="transactionAttributes">
			<props>
				<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="select*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="query*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="*">PROPAGATION_REQUIRED,-RuntimeException,-Exception</prop>
			</props>
		</property>
	</bean>
	<!-- 用来定义那些类需要采用事物管理 spring 事物的动态代理类 BeanNameAutoProxyCreator 根据类名自动代理，接受表达式 -->
	<bean id="BeanProxy" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames">
			<!-- 对类名以MybatisService结尾的类进行代理 -->
			<value>*Service*</value>
		</property>
		<!-- 对代理类进行加载拦截器(实现通知的过程) -->
		<property name="interceptorNames">
			<list>
				<value>transactionInterceptor</value>
			</list>
		</property>
	</bean>
	<!-- 导入表头解析 -->
	<bean id="HeadDefineHandler" class="com.taozhu.modules.web.excel.service.HeadDefineHandler" abstract="true"/>
	<bean id="FileDataHandler" class="com.taozhu.modules.web.excel.service.FileDataHandler" abstract="true">
		<property name="baseDAO" ref="baseDAO"/>
	</bean>
</beans>